/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/api/playgrounds/image/{sharable_playground_uuid}": {
    get: operations["api_playgrounds_image_retrieve"];
  };
  "/api/playgrounds/ot-info/{sharable_playground_uuid}": {
    get: operations["api_playgrounds_ot_info_retrieve"];
  };
  "/api/projects/data-points/": {
    get: operations["api_projects_data_points_list"];
    post: operations["api_projects_data_points_create"];
  };
  "/api/projects/data-points/{id}/": {
    get: operations["api_projects_data_points_retrieve"];
    put: operations["api_projects_data_points_update"];
    delete: operations["api_projects_data_points_destroy"];
    patch: operations["api_projects_data_points_partial_update"];
  };
  "/api/projects/traces/": {
    post: operations["api_projects_traces_create"];
  };
  "/api/providers/": {
    get: operations["api_providers_retrieve"];
  };
  "/api/providers/leaderboard": {
    get: operations["api_providers_leaderboard_retrieve"];
  };
  "/api/schema/": {
    /**
     * @description OpenApi3 schema for this API. Format can be selected via content negotiation.
     *
     * - YAML: application/vnd.oai.openapi
     * - JSON: application/vnd.oai.openapi+json
     */
    get: operations["api_schema_retrieve"];
  };
  "/auth-token/": {
    post: operations["auth_token_create"];
  };
  "/v1/chat/completions": {
    /** @description Creates a model response for the given chat conversation. */
    post: operations["v1_chat_completions_create"];
  };
  "/v1/embeddings": {
    /** @description Creates embeddings for the given input. */
    post: operations["v1_embeddings_create"];
  };
  "/v1/finetuning": {
    /** @description Creates a finetuning job. */
    post: operations["v1_finetuning_create"];
  };
  "/v1/finetuning/{job_id}": {
    /** @description Retrieve a finetuning job. */
    get: operations["v1_finetuning_retrieve"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    APIResponseValidationError: {
      message: string;
      /**
       * @description * `APIResponseValidationError` - APIResponseValidationError
       * @enum {string}
       */
      code: "APIResponseValidationError";
    };
    /**
     * @description * `APIResponseValidationError` - APIResponseValidationError
     * @enum {string}
     */
    APIResponseValidationErrorCodeEnum: "APIResponseValidationError";
    AuthToken: {
      username: string;
      password: string;
      token: string;
    };
    AuthenticationError: {
      message: string;
      /**
       * @description * `AuthenticationError` - AuthenticationError
       * @enum {string}
       */
      code: "AuthenticationError";
    };
    /**
     * @description * `AuthenticationError` - AuthenticationError
     * @enum {string}
     */
    AuthenticationErrorCodeEnum: "AuthenticationError";
    CatchAllError: {
      message: string;
      /**
       * @description * `CatchAllError` - CatchAllError
       * @enum {string}
       */
      code: "CatchAllError";
    };
    /**
     * @description * `CatchAllError` - CatchAllError
     * @enum {string}
     */
    CatchAllErrorCodeEnum: "CatchAllError";
    ChatCompletionInput: {
      /** @description The ID of the project to use. */
      project_id: number;
      /** @description A list of messages comprising the conversation so far. */
      messages: ({
          /**
           * @description The role of the sender (e.g., 'user' or 'system').
           *
           * * `user` - user
           * * `system` - system
           */
          role: "user" | "system";
          /** @description The content of the message. */
          content: string;
        })[];
      /** @description ID of the model to use. See the model endpoint compatibility table for details. */
      model?: string;
      /**
       * Format: double
       * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.
       */
      frequency_penalty?: number;
      /** @description JSON object that maps tokens to an associated bias value from -100 to 100. */
      logit_bias?: {
        [key: string]: unknown;
      } | null;
      /** @description The maximum number of tokens to generate in the chat completion. */
      max_tokens?: number | null;
      /** @description How many chat completion choices to generate for each input message. */
      n?: number;
      /**
       * Format: double
       * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.
       */
      presence_penalty?: number;
      /** @description An object specifying the format that the model must output. */
      response_format?: {
        [key: string]: unknown;
      } | null;
      /** @description This feature is in Beta. If specified, our system will make a best effort to sample deterministically. */
      seed?: number | null;
      /** @description Up to 4 sequences where the API will stop generating further tokens. */
      stop?: string | null;
      /** @description If set, partial message deltas will be sent, like in ChatGPT. */
      stream?: boolean;
      /**
       * Format: double
       * @description What sampling temperature to use, between 0 and 2.
       */
      temperature?: number | null;
      /**
       * Format: double
       * @description An alternative to sampling with temperature, called nucleus sampling.
       */
      top_p?: number | null;
      /** @description A list of tools the model may call. Currently, only functions are supported as a tool. */
      tools?: {
          [key: string]: unknown;
        }[];
      /** @description A unique identifier representing your end-user. */
      user?: string | null;
    };
    ChatCompletionResponse: {
      /** @description A unique identifier for the chat completion. Each chunk has the same ID. */
      id: string;
      /** @description A list of chat completion choices. Can be more than one if n is greater than 1. */
      choices: {
          /** @description The generated message in the chat completion choice. */
          message: string;
          /** @description The reason the chat completion finished, e.g., 'stop' or 'length'. */
          finish_reason: string;
        }[];
      /** @description The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp. */
      created: number;
      /** @description The model to generate the completion. */
      model: string;
      /** @description The name of the provider that generated the completion. */
      provider_name: string;
      /** @description The ID of the provider that generated the completion. */
      provider_id: string;
      /** @description The usage statistics for the completion. */
      usage?: {
        completion_tokens?: number;
        prompt_tokens?: number;
        total_tokens?: number;
      };
    };
    ConflictError: {
      message: string;
      /**
       * @description * `ConflictError` - ConflictError
       * @enum {string}
       */
      code: "ConflictError";
    };
    /**
     * @description * `ConflictError` - ConflictError
     * @enum {string}
     */
    ConflictErrorCodeEnum: "ConflictError";
    DataPoint: {
      id: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      input?: string | null;
      output?: string | null;
      positive: boolean;
      /** Format: uuid */
      trace?: string | null;
    };
    Embedding: {
      /** @description The index of the token in the input. */
      index: number;
      /** @description The embedding for the input. */
      embedding: number[];
    };
    EmbeddingsInput: {
      /** @description The ID of the project to use. */
      project_id: number;
      model?: string;
      /** @default float */
      encoding_format?: "float" | "base64";
      /** @description Embedding Input */
      input: (string | string[] | number[] | number[][])[];
    };
    EmbeddingsResponse: {
      /** @description The embeddings for the input. */
      data: {
          /** @description The index of the token in the input. */
          index: number;
          /** @description The embedding for the input. */
          embedding: number[];
        }[];
      /** @description The model to generate the embeddings. */
      model: string;
      /** @description The usage statistics for the completion. */
      usage?: {
        completion_tokens?: number;
        prompt_tokens?: number;
        total_tokens?: number;
      };
      /** @description The name of the provider that generated the completion. */
      provider_name: string;
      /** @description The ID of the provider that generated the completion. */
      provider_id: string;
    };
    /**
     * @description * `float` - float
     * * `base64` - base64
     * @enum {string}
     */
    EncodingFormatEnum: "float" | "base64";
    FineTuningInput: {
      /** @description The ID of the project to use. */
      project_id: number;
      /** @description ID of the model to use. See the model endpoint compatibility table for details. */
      model?: string;
      /** @description The training file. */
      training_data: {
          /** @description The input text. */
          input: string;
          /** @description The output text. */
          output: string;
        }[];
      /** @description The training file. */
      validaton_data?: {
          /** @description The input text. */
          input: string;
          /** @description The output text. */
          output: string;
        }[];
      /**
       * @description The number of epochs to train for.
       * @default 1
       */
      num_epochs?: number;
    };
    FineTuningResponse: {
      /** @description The ID of the fine-tuning job. */
      job_id: string;
    };
    FineTuningSample: {
      /** @description The input text. */
      input: string;
      /** @description The output text. */
      output: string;
    };
    InputDataPoint: {
      id: number;
      input?: string | null;
      output?: string | null;
      positive: boolean;
      trace?: string | null;
      project: number;
    };
    InternalServerError: {
      message: string;
      /**
       * @description * `ProviderInternalServerError` - ProviderInternalServerError
       * @enum {string}
       */
      code: "ProviderInternalServerError";
    } | {
      message: string;
      /**
       * @description * `APIResponseValidationError` - APIResponseValidationError
       * @enum {string}
       */
      code: "APIResponseValidationError";
    } | {
      message: string;
      /**
       * @description * `ProviderAPIStatusError` - ProviderAPIStatusError
       * @enum {string}
       */
      code: "ProviderAPIStatusError";
    } | {
      message: string;
      /**
       * @description * `ProviderAPITimeoutError` - ProviderAPITimeoutError
       * @enum {string}
       */
      code: "ProviderAPITimeoutError";
    } | {
      message: string;
      /**
       * @description * `ProviderAPIConnectionError` - ProviderAPIConnectionError
       * @enum {string}
       */
      code: "ProviderAPIConnectionError";
    } | {
      message: string;
      /**
       * @description * `CatchAllError` - CatchAllError
       * @enum {string}
       */
      code: "CatchAllError";
    };
    LeaderboardItem: {
      provider: string;
      provider_slug: string;
      provider_name: string;
      /** Format: double */
      avg_final_score: number;
      /** Format: double */
      avg_tokens_per_second: number;
      /** Format: double */
      avg_uptime: number;
      avg_uptime_score: number;
      avg_tokens_score: number;
    };
    LeaderboardResponse: {
      days: number;
      leaderboard: {
          provider: string;
          provider_slug: string;
          provider_name: string;
          /** Format: double */
          avg_final_score: number;
          /** Format: double */
          avg_tokens_per_second: number;
          /** Format: double */
          avg_uptime: number;
          avg_uptime_score: number;
          avg_tokens_score: number;
        }[];
    };
    Message: {
      /**
       * @description The role of the sender (e.g., 'user' or 'system').
       *
       * * `user` - user
       * * `system` - system
       */
      role: "user" | "system";
      /** @description The content of the message. */
      content: string;
    };
    ModelNotFoundError: {
      message: string;
      /**
       * @description * `ModelNotFoundError` - ModelNotFoundError
       * @enum {string}
       */
      code: "ModelNotFoundError";
    };
    /**
     * @description * `ModelNotFoundError` - ModelNotFoundError
     * @enum {string}
     */
    ModelNotFoundErrorCodeEnum: "ModelNotFoundError";
    NotFoundError: OneOf<[{
      message: string;
      /**
       * @description * `ProviderNotFoundError` - ProviderNotFoundError
       * @enum {string}
       */
      code: "ProviderNotFoundError";
    }, {
      message: string;
      /**
       * @description * `ModelNotFoundError` - ModelNotFoundError
       * @enum {string}
       */
      code: "ModelNotFoundError";
    }]>;
    PatchedDataPoint: {
      id?: number;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      input?: string | null;
      output?: string | null;
      positive?: boolean;
      /** Format: uuid */
      trace?: string | null;
    };
    PermissionDeniedError: {
      message: string;
      /**
       * @description * `PermissionDeniedError` - PermissionDeniedError
       * @enum {string}
       */
      code: "PermissionDeniedError";
    };
    /**
     * @description * `PermissionDeniedError` - PermissionDeniedError
     * @enum {string}
     */
    PermissionDeniedErrorCodeEnum: "PermissionDeniedError";
    ProviderAPIConnectionError: {
      message: string;
      /**
       * @description * `ProviderAPIConnectionError` - ProviderAPIConnectionError
       * @enum {string}
       */
      code: "ProviderAPIConnectionError";
    };
    /**
     * @description * `ProviderAPIConnectionError` - ProviderAPIConnectionError
     * @enum {string}
     */
    ProviderAPIConnectionErrorCodeEnum: "ProviderAPIConnectionError";
    ProviderAPIStatusError: {
      message: string;
      /**
       * @description * `ProviderAPIStatusError` - ProviderAPIStatusError
       * @enum {string}
       */
      code: "ProviderAPIStatusError";
    };
    /**
     * @description * `ProviderAPIStatusError` - ProviderAPIStatusError
     * @enum {string}
     */
    ProviderAPIStatusErrorCodeEnum: "ProviderAPIStatusError";
    ProviderAPITimeoutError: {
      message: string;
      /**
       * @description * `ProviderAPITimeoutError` - ProviderAPITimeoutError
       * @enum {string}
       */
      code: "ProviderAPITimeoutError";
    };
    /**
     * @description * `ProviderAPITimeoutError` - ProviderAPITimeoutError
     * @enum {string}
     */
    ProviderAPITimeoutErrorCodeEnum: "ProviderAPITimeoutError";
    ProviderInternalServerError: {
      message: string;
      /**
       * @description * `ProviderInternalServerError` - ProviderInternalServerError
       * @enum {string}
       */
      code: "ProviderInternalServerError";
    };
    /**
     * @description * `ProviderInternalServerError` - ProviderInternalServerError
     * @enum {string}
     */
    ProviderInternalServerErrorCodeEnum: "ProviderInternalServerError";
    ProviderNotFoundError: {
      message: string;
      /**
       * @description * `ProviderNotFoundError` - ProviderNotFoundError
       * @enum {string}
       */
      code: "ProviderNotFoundError";
    };
    /**
     * @description * `ProviderNotFoundError` - ProviderNotFoundError
     * @enum {string}
     */
    ProviderNotFoundErrorCodeEnum: "ProviderNotFoundError";
    RateLimitError: {
      message: string;
      /**
       * @description * `RateLimitError` - RateLimitError
       * @enum {string}
       */
      code: "RateLimitError";
    };
    /**
     * @description * `RateLimitError` - RateLimitError
     * @enum {string}
     */
    RateLimitErrorCodeEnum: "RateLimitError";
    ResponseChoice: {
      /** @description The generated message in the chat completion choice. */
      message: string;
      /** @description The reason the chat completion finished, e.g., 'stop' or 'length'. */
      finish_reason: string;
    };
    RetrieveFineTuningResponse: {
      /** @description The ID of the fine-tuning job. */
      id: string;
      /** @description The ID of the fine-tuned model. */
      fine_tuned_model: string;
      /** @description The Unix timestamp (in seconds) of when the fine-tuning job was created. */
      created_at: number;
      /** @description The Unix timestamp (in seconds) of when the fine-tuning job was finished. */
      finished_at?: number;
      /** @description The status of the fine-tuning job. */
      status: string;
      /** @description The error message of the fine-tuning job. */
      error?: string;
      /** @description The name of the provider that generated the completion. */
      provider_name: string;
      /** @description The ID of the provider that generated the completion. */
      provider_id: string;
      /** @description The status code of the fine-tuning job. */
      status_code: number;
    };
    /**
     * @description * `user` - user
     * * `system` - system
     * @enum {string}
     */
    RoleEnum: "user" | "system";
    Trace: {
      /** Format: uuid */
      id: string;
      model_name: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      is_deleted?: boolean;
      /** Format: date-time */
      start_time: string;
      /** Format: date-time */
      end_time: string;
      input_prompt?: string;
      /** Format: uri */
      input_file_prompt?: string | null;
      input_prompt_tokens_number: number;
      endpoint_type?: string | null;
      /** Format: decimal */
      privacy_score?: string | null;
      output_text?: string;
      output_text_tokens_number: number;
      http_status_code?: number | null;
      raw_request?: {
        [key: string]: unknown;
      } | null;
      raw_response?: {
        [key: string]: unknown;
      } | null;
      tag?: string | null;
      error?: string | null;
      text_to_text_model_parameters?: number | null;
      api_key?: number | null;
    };
    UnprocessableEntityError: {
      message: string;
      /**
       * @description * `UnprocessableEntityError` - UnprocessableEntityError
       * @enum {string}
       */
      code: "UnprocessableEntityError";
    };
    /**
     * @description * `UnprocessableEntityError` - UnprocessableEntityError
     * @enum {string}
     */
    UnprocessableEntityErrorCodeEnum: "UnprocessableEntityError";
    Usage: {
      completion_tokens?: number;
      prompt_tokens?: number;
      total_tokens?: number;
    };
    ValidationDetail: {
      /** @description Error messages for the field. */
      error_messages: {
          [key: string]: unknown;
        }[];
    };
    ValidationError: {
      /** @description A description of the validation error. */
      message: string;
      /** @description Detailed information about the validation errors. */
      details: {
        [key: string]: {
          /** @description Error messages for the field. */
          error_messages: {
              [key: string]: unknown;
            }[];
        };
      };
      /**
       * @description * `ValidationError` - ValidationError
       * @enum {string}
       */
      code: "ValidationError";
    };
    /**
     * @description * `ValidationError` - ValidationError
     * @enum {string}
     */
    ValidationErrorCodeEnum: "ValidationError";
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  api_playgrounds_image_retrieve: {
    parameters: {
      path: {
        sharable_playground_uuid: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  api_playgrounds_ot_info_retrieve: {
    parameters: {
      path: {
        sharable_playground_uuid: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  api_projects_data_points_list: {
    responses: {
      200: {
        content: {
          "application/json": ({
              id: number;
              /** Format: date-time */
              created_at: string;
              /** Format: date-time */
              updated_at: string;
              input?: string | null;
              output?: string | null;
              positive: boolean;
              /** Format: uuid */
              trace?: string | null;
            })[];
        };
      };
    };
  };
  api_projects_data_points_create: {
    requestBody: {
      content: {
        "application/json": {
          id: number;
          input?: string | null;
          output?: string | null;
          positive: boolean;
          trace?: string | null;
          project: number;
        };
        "application/x-www-form-urlencoded": {
          id: number;
          input?: string | null;
          output?: string | null;
          positive: boolean;
          trace?: string | null;
          project: number;
        };
        "multipart/form-data": {
          id: number;
          input?: string | null;
          output?: string | null;
          positive: boolean;
          trace?: string | null;
          project: number;
        };
      };
    };
    responses: {
      201: {
        content: {
          "application/json": {
            id: number;
            input?: string | null;
            output?: string | null;
            positive: boolean;
            trace?: string | null;
            project: number;
          };
        };
      };
    };
  };
  api_projects_data_points_retrieve: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this data point. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            id: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            input?: string | null;
            output?: string | null;
            positive: boolean;
            /** Format: uuid */
            trace?: string | null;
          };
        };
      };
    };
  };
  api_projects_data_points_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this data point. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          id: number;
          input?: string | null;
          output?: string | null;
          positive: boolean;
          trace?: string | null;
          project: number;
        };
        "application/x-www-form-urlencoded": {
          id: number;
          input?: string | null;
          output?: string | null;
          positive: boolean;
          trace?: string | null;
          project: number;
        };
        "multipart/form-data": {
          id: number;
          input?: string | null;
          output?: string | null;
          positive: boolean;
          trace?: string | null;
          project: number;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            id: number;
            input?: string | null;
            output?: string | null;
            positive: boolean;
            trace?: string | null;
            project: number;
          };
        };
      };
    };
  };
  api_projects_data_points_destroy: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this data point. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  api_projects_data_points_partial_update: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this data point. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          id?: number;
          /** Format: date-time */
          created_at?: string;
          /** Format: date-time */
          updated_at?: string;
          input?: string | null;
          output?: string | null;
          positive?: boolean;
          /** Format: uuid */
          trace?: string | null;
        };
        "application/x-www-form-urlencoded": {
          id?: number;
          /** Format: date-time */
          created_at?: string;
          /** Format: date-time */
          updated_at?: string;
          input?: string | null;
          output?: string | null;
          positive?: boolean;
          /** Format: uuid */
          trace?: string | null;
        };
        "multipart/form-data": {
          id?: number;
          /** Format: date-time */
          created_at?: string;
          /** Format: date-time */
          updated_at?: string;
          input?: string | null;
          output?: string | null;
          positive?: boolean;
          /** Format: uuid */
          trace?: string | null;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            id: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            input?: string | null;
            output?: string | null;
            positive: boolean;
            /** Format: uuid */
            trace?: string | null;
          };
        };
      };
    };
  };
  api_projects_traces_create: {
    requestBody: {
      content: {
        "application/json": {
          /** Format: uuid */
          id: string;
          model_name: string;
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
          is_deleted?: boolean;
          /** Format: date-time */
          start_time: string;
          /** Format: date-time */
          end_time: string;
          input_prompt?: string;
          /** Format: uri */
          input_file_prompt?: string | null;
          input_prompt_tokens_number: number;
          endpoint_type?: string | null;
          /** Format: decimal */
          privacy_score?: string | null;
          output_text?: string;
          output_text_tokens_number: number;
          http_status_code?: number | null;
          raw_request?: {
            [key: string]: unknown;
          } | null;
          raw_response?: {
            [key: string]: unknown;
          } | null;
          tag?: string | null;
          error?: string | null;
          text_to_text_model_parameters?: number | null;
          api_key?: number | null;
        };
        "application/x-www-form-urlencoded": {
          /** Format: uuid */
          id: string;
          model_name: string;
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
          is_deleted?: boolean;
          /** Format: date-time */
          start_time: string;
          /** Format: date-time */
          end_time: string;
          input_prompt?: string;
          /** Format: uri */
          input_file_prompt?: string | null;
          input_prompt_tokens_number: number;
          endpoint_type?: string | null;
          /** Format: decimal */
          privacy_score?: string | null;
          output_text?: string;
          output_text_tokens_number: number;
          http_status_code?: number | null;
          raw_request?: {
            [key: string]: unknown;
          } | null;
          raw_response?: {
            [key: string]: unknown;
          } | null;
          tag?: string | null;
          error?: string | null;
          text_to_text_model_parameters?: number | null;
          api_key?: number | null;
        };
        "multipart/form-data": {
          /** Format: uuid */
          id: string;
          model_name: string;
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
          is_deleted?: boolean;
          /** Format: date-time */
          start_time: string;
          /** Format: date-time */
          end_time: string;
          input_prompt?: string;
          /** Format: uri */
          input_file_prompt?: string | null;
          input_prompt_tokens_number: number;
          endpoint_type?: string | null;
          /** Format: decimal */
          privacy_score?: string | null;
          output_text?: string;
          output_text_tokens_number: number;
          http_status_code?: number | null;
          raw_request?: {
            [key: string]: unknown;
          } | null;
          raw_response?: {
            [key: string]: unknown;
          } | null;
          tag?: string | null;
          error?: string | null;
          text_to_text_model_parameters?: number | null;
          api_key?: number | null;
        };
      };
    };
    responses: {
      201: {
        content: {
          "application/json": {
            /** Format: uuid */
            id: string;
            model_name: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            is_deleted?: boolean;
            /** Format: date-time */
            start_time: string;
            /** Format: date-time */
            end_time: string;
            input_prompt?: string;
            /** Format: uri */
            input_file_prompt?: string | null;
            input_prompt_tokens_number: number;
            endpoint_type?: string | null;
            /** Format: decimal */
            privacy_score?: string | null;
            output_text?: string;
            output_text_tokens_number: number;
            http_status_code?: number | null;
            raw_request?: {
              [key: string]: unknown;
            } | null;
            raw_response?: {
              [key: string]: unknown;
            } | null;
            tag?: string | null;
            error?: string | null;
            text_to_text_model_parameters?: number | null;
            api_key?: number | null;
          };
        };
      };
    };
  };
  api_providers_retrieve: {
    parameters: {
      query?: {
        /** @description Number of days to retrieve */
        days?: number;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  api_providers_leaderboard_retrieve: {
    parameters: {
      query?: {
        /** @description Number of days to retrieve */
        days?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            days: number;
            leaderboard: {
                provider: string;
                provider_slug: string;
                provider_name: string;
                /** Format: double */
                avg_final_score: number;
                /** Format: double */
                avg_tokens_per_second: number;
                /** Format: double */
                avg_uptime: number;
                avg_uptime_score: number;
                avg_tokens_score: number;
              }[];
          };
        };
      };
    };
  };
  /**
   * @description OpenApi3 schema for this API. Format can be selected via content negotiation.
   *
   * - YAML: application/vnd.oai.openapi
   * - JSON: application/vnd.oai.openapi+json
   */
  api_schema_retrieve: {
    parameters: {
      query?: {
        format?: "json" | "yaml";
        lang?: "af" | "ar" | "ar-dz" | "ast" | "az" | "be" | "bg" | "bn" | "br" | "bs" | "ca" | "ckb" | "cs" | "cy" | "da" | "de" | "dsb" | "el" | "en" | "en-au" | "en-gb" | "eo" | "es" | "es-ar" | "es-co" | "es-mx" | "es-ni" | "es-ve" | "et" | "eu" | "fa" | "fi" | "fr" | "fy" | "ga" | "gd" | "gl" | "he" | "hi" | "hr" | "hsb" | "hu" | "hy" | "ia" | "id" | "ig" | "io" | "is" | "it" | "ja" | "ka" | "kab" | "kk" | "km" | "kn" | "ko" | "ky" | "lb" | "lt" | "lv" | "mk" | "ml" | "mn" | "mr" | "ms" | "my" | "nb" | "ne" | "nl" | "nn" | "os" | "pa" | "pl" | "pt" | "pt-br" | "ro" | "ru" | "sk" | "sl" | "sq" | "sr" | "sr-latn" | "sv" | "sw" | "ta" | "te" | "tg" | "th" | "tk" | "tr" | "tt" | "udm" | "uk" | "ur" | "uz" | "vi" | "zh-hans" | "zh-hant";
      };
    };
    responses: {
      200: {
        content: {
          "application/vnd.oai.openapi": {
            [key: string]: unknown;
          };
          "application/yaml": {
            [key: string]: unknown;
          };
          "application/vnd.oai.openapi+json": {
            [key: string]: unknown;
          };
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  auth_token_create: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": {
          username: string;
          password: string;
          token: string;
        };
        "multipart/form-data": {
          username: string;
          password: string;
          token: string;
        };
        "application/json": {
          username: string;
          password: string;
          token: string;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            username: string;
            password: string;
            token: string;
          };
        };
      };
    };
  };
  /** @description Creates a model response for the given chat conversation. */
  v1_chat_completions_create: {
    parameters: {
      header: {
        /** @description API Key for authentication */
        Authorization: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The ID of the project to use. */
          project_id: number;
          /** @description A list of messages comprising the conversation so far. */
          messages: ({
              /**
               * @description The role of the sender (e.g., 'user' or 'system').
               *
               * * `user` - user
               * * `system` - system
               */
              role: "user" | "system";
              /** @description The content of the message. */
              content: string;
            })[];
          /** @description ID of the model to use. See the model endpoint compatibility table for details. */
          model?: string;
          /**
           * Format: double
           * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.
           */
          frequency_penalty?: number;
          /** @description JSON object that maps tokens to an associated bias value from -100 to 100. */
          logit_bias?: {
            [key: string]: unknown;
          } | null;
          /** @description The maximum number of tokens to generate in the chat completion. */
          max_tokens?: number | null;
          /** @description How many chat completion choices to generate for each input message. */
          n?: number;
          /**
           * Format: double
           * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.
           */
          presence_penalty?: number;
          /** @description An object specifying the format that the model must output. */
          response_format?: {
            [key: string]: unknown;
          } | null;
          /** @description This feature is in Beta. If specified, our system will make a best effort to sample deterministically. */
          seed?: number | null;
          /** @description Up to 4 sequences where the API will stop generating further tokens. */
          stop?: string | null;
          /** @description If set, partial message deltas will be sent, like in ChatGPT. */
          stream?: boolean;
          /**
           * Format: double
           * @description What sampling temperature to use, between 0 and 2.
           */
          temperature?: number | null;
          /**
           * Format: double
           * @description An alternative to sampling with temperature, called nucleus sampling.
           */
          top_p?: number | null;
          /** @description A list of tools the model may call. Currently, only functions are supported as a tool. */
          tools?: {
              [key: string]: unknown;
            }[];
          /** @description A unique identifier representing your end-user. */
          user?: string | null;
        };
        "application/x-www-form-urlencoded": {
          /** @description The ID of the project to use. */
          project_id: number;
          /** @description A list of messages comprising the conversation so far. */
          messages: ({
              /**
               * @description The role of the sender (e.g., 'user' or 'system').
               *
               * * `user` - user
               * * `system` - system
               */
              role: "user" | "system";
              /** @description The content of the message. */
              content: string;
            })[];
          /** @description ID of the model to use. See the model endpoint compatibility table for details. */
          model?: string;
          /**
           * Format: double
           * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.
           */
          frequency_penalty?: number;
          /** @description JSON object that maps tokens to an associated bias value from -100 to 100. */
          logit_bias?: {
            [key: string]: unknown;
          } | null;
          /** @description The maximum number of tokens to generate in the chat completion. */
          max_tokens?: number | null;
          /** @description How many chat completion choices to generate for each input message. */
          n?: number;
          /**
           * Format: double
           * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.
           */
          presence_penalty?: number;
          /** @description An object specifying the format that the model must output. */
          response_format?: {
            [key: string]: unknown;
          } | null;
          /** @description This feature is in Beta. If specified, our system will make a best effort to sample deterministically. */
          seed?: number | null;
          /** @description Up to 4 sequences where the API will stop generating further tokens. */
          stop?: string | null;
          /** @description If set, partial message deltas will be sent, like in ChatGPT. */
          stream?: boolean;
          /**
           * Format: double
           * @description What sampling temperature to use, between 0 and 2.
           */
          temperature?: number | null;
          /**
           * Format: double
           * @description An alternative to sampling with temperature, called nucleus sampling.
           */
          top_p?: number | null;
          /** @description A list of tools the model may call. Currently, only functions are supported as a tool. */
          tools?: {
              [key: string]: unknown;
            }[];
          /** @description A unique identifier representing your end-user. */
          user?: string | null;
        };
        "multipart/form-data": {
          /** @description The ID of the project to use. */
          project_id: number;
          /** @description A list of messages comprising the conversation so far. */
          messages: ({
              /**
               * @description The role of the sender (e.g., 'user' or 'system').
               *
               * * `user` - user
               * * `system` - system
               */
              role: "user" | "system";
              /** @description The content of the message. */
              content: string;
            })[];
          /** @description ID of the model to use. See the model endpoint compatibility table for details. */
          model?: string;
          /**
           * Format: double
           * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.
           */
          frequency_penalty?: number;
          /** @description JSON object that maps tokens to an associated bias value from -100 to 100. */
          logit_bias?: {
            [key: string]: unknown;
          } | null;
          /** @description The maximum number of tokens to generate in the chat completion. */
          max_tokens?: number | null;
          /** @description How many chat completion choices to generate for each input message. */
          n?: number;
          /**
           * Format: double
           * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.
           */
          presence_penalty?: number;
          /** @description An object specifying the format that the model must output. */
          response_format?: {
            [key: string]: unknown;
          } | null;
          /** @description This feature is in Beta. If specified, our system will make a best effort to sample deterministically. */
          seed?: number | null;
          /** @description Up to 4 sequences where the API will stop generating further tokens. */
          stop?: string | null;
          /** @description If set, partial message deltas will be sent, like in ChatGPT. */
          stream?: boolean;
          /**
           * Format: double
           * @description What sampling temperature to use, between 0 and 2.
           */
          temperature?: number | null;
          /**
           * Format: double
           * @description An alternative to sampling with temperature, called nucleus sampling.
           */
          top_p?: number | null;
          /** @description A list of tools the model may call. Currently, only functions are supported as a tool. */
          tools?: {
              [key: string]: unknown;
            }[];
          /** @description A unique identifier representing your end-user. */
          user?: string | null;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @description A unique identifier for the chat completion. Each chunk has the same ID. */
            id: string;
            /** @description A list of chat completion choices. Can be more than one if n is greater than 1. */
            choices: {
                /** @description The generated message in the chat completion choice. */
                message: string;
                /** @description The reason the chat completion finished, e.g., 'stop' or 'length'. */
                finish_reason: string;
              }[];
            /** @description The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp. */
            created: number;
            /** @description The model to generate the completion. */
            model: string;
            /** @description The name of the provider that generated the completion. */
            provider_name: string;
            /** @description The ID of the provider that generated the completion. */
            provider_id: string;
            /** @description The usage statistics for the completion. */
            usage?: {
              completion_tokens?: number;
              prompt_tokens?: number;
              total_tokens?: number;
            };
          };
        };
      };
      400: {
        content: {
          "application/json": {
            /** @description A description of the validation error. */
            message: string;
            /** @description Detailed information about the validation errors. */
            details: {
              [key: string]: {
                /** @description Error messages for the field. */
                error_messages: {
                    [key: string]: unknown;
                  }[];
              };
            };
            /**
             * @description * `ValidationError` - ValidationError
             * @enum {string}
             */
            code: "ValidationError";
          };
        };
      };
      401: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `AuthenticationError` - AuthenticationError
             * @enum {string}
             */
            code: "AuthenticationError";
          };
        };
      };
      403: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `PermissionDeniedError` - PermissionDeniedError
             * @enum {string}
             */
            code: "PermissionDeniedError";
          };
        };
      };
      404: {
        content: {
          "application/json": OneOf<[{
            message: string;
            /**
             * @description * `ProviderNotFoundError` - ProviderNotFoundError
             * @enum {string}
             */
            code: "ProviderNotFoundError";
          }, {
            message: string;
            /**
             * @description * `ModelNotFoundError` - ModelNotFoundError
             * @enum {string}
             */
            code: "ModelNotFoundError";
          }]>;
        };
      };
      409: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `ConflictError` - ConflictError
             * @enum {string}
             */
            code: "ConflictError";
          };
        };
      };
      422: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `UnprocessableEntityError` - UnprocessableEntityError
             * @enum {string}
             */
            code: "UnprocessableEntityError";
          };
        };
      };
      429: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `RateLimitError` - RateLimitError
             * @enum {string}
             */
            code: "RateLimitError";
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `ProviderInternalServerError` - ProviderInternalServerError
             * @enum {string}
             */
            code: "ProviderInternalServerError";
          } | {
            message: string;
            /**
             * @description * `APIResponseValidationError` - APIResponseValidationError
             * @enum {string}
             */
            code: "APIResponseValidationError";
          } | {
            message: string;
            /**
             * @description * `ProviderAPIStatusError` - ProviderAPIStatusError
             * @enum {string}
             */
            code: "ProviderAPIStatusError";
          } | {
            message: string;
            /**
             * @description * `ProviderAPITimeoutError` - ProviderAPITimeoutError
             * @enum {string}
             */
            code: "ProviderAPITimeoutError";
          } | {
            message: string;
            /**
             * @description * `ProviderAPIConnectionError` - ProviderAPIConnectionError
             * @enum {string}
             */
            code: "ProviderAPIConnectionError";
          } | {
            message: string;
            /**
             * @description * `CatchAllError` - CatchAllError
             * @enum {string}
             */
            code: "CatchAllError";
          };
        };
      };
    };
  };
  /** @description Creates embeddings for the given input. */
  v1_embeddings_create: {
    parameters: {
      header: {
        /** @description API Key for authentication */
        Authorization: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The ID of the project to use. */
          project_id: number;
          model?: string;
          /** @default float */
          encoding_format?: "float" | "base64";
          /** @description Embedding Input */
          input: (string | string[] | number[] | number[][])[];
        };
        "application/x-www-form-urlencoded": {
          /** @description The ID of the project to use. */
          project_id: number;
          model?: string;
          /** @default float */
          encoding_format?: "float" | "base64";
          /** @description Embedding Input */
          input: (string | string[] | number[] | number[][])[];
        };
        "multipart/form-data": {
          /** @description The ID of the project to use. */
          project_id: number;
          model?: string;
          /** @default float */
          encoding_format?: "float" | "base64";
          /** @description Embedding Input */
          input: (string | string[] | number[] | number[][])[];
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @description The embeddings for the input. */
            data: {
                /** @description The index of the token in the input. */
                index: number;
                /** @description The embedding for the input. */
                embedding: number[];
              }[];
            /** @description The model to generate the embeddings. */
            model: string;
            /** @description The usage statistics for the completion. */
            usage?: {
              completion_tokens?: number;
              prompt_tokens?: number;
              total_tokens?: number;
            };
            /** @description The name of the provider that generated the completion. */
            provider_name: string;
            /** @description The ID of the provider that generated the completion. */
            provider_id: string;
          };
        };
      };
      400: {
        content: {
          "application/json": {
            /** @description A description of the validation error. */
            message: string;
            /** @description Detailed information about the validation errors. */
            details: {
              [key: string]: {
                /** @description Error messages for the field. */
                error_messages: {
                    [key: string]: unknown;
                  }[];
              };
            };
            /**
             * @description * `ValidationError` - ValidationError
             * @enum {string}
             */
            code: "ValidationError";
          };
        };
      };
      401: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `AuthenticationError` - AuthenticationError
             * @enum {string}
             */
            code: "AuthenticationError";
          };
        };
      };
      403: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `PermissionDeniedError` - PermissionDeniedError
             * @enum {string}
             */
            code: "PermissionDeniedError";
          };
        };
      };
      404: {
        content: {
          "application/json": OneOf<[{
            message: string;
            /**
             * @description * `ProviderNotFoundError` - ProviderNotFoundError
             * @enum {string}
             */
            code: "ProviderNotFoundError";
          }, {
            message: string;
            /**
             * @description * `ModelNotFoundError` - ModelNotFoundError
             * @enum {string}
             */
            code: "ModelNotFoundError";
          }]>;
        };
      };
      409: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `ConflictError` - ConflictError
             * @enum {string}
             */
            code: "ConflictError";
          };
        };
      };
      422: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `UnprocessableEntityError` - UnprocessableEntityError
             * @enum {string}
             */
            code: "UnprocessableEntityError";
          };
        };
      };
      429: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `RateLimitError` - RateLimitError
             * @enum {string}
             */
            code: "RateLimitError";
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `ProviderInternalServerError` - ProviderInternalServerError
             * @enum {string}
             */
            code: "ProviderInternalServerError";
          } | {
            message: string;
            /**
             * @description * `APIResponseValidationError` - APIResponseValidationError
             * @enum {string}
             */
            code: "APIResponseValidationError";
          } | {
            message: string;
            /**
             * @description * `ProviderAPIStatusError` - ProviderAPIStatusError
             * @enum {string}
             */
            code: "ProviderAPIStatusError";
          } | {
            message: string;
            /**
             * @description * `ProviderAPITimeoutError` - ProviderAPITimeoutError
             * @enum {string}
             */
            code: "ProviderAPITimeoutError";
          } | {
            message: string;
            /**
             * @description * `ProviderAPIConnectionError` - ProviderAPIConnectionError
             * @enum {string}
             */
            code: "ProviderAPIConnectionError";
          } | {
            message: string;
            /**
             * @description * `CatchAllError` - CatchAllError
             * @enum {string}
             */
            code: "CatchAllError";
          };
        };
      };
    };
  };
  /** @description Creates a finetuning job. */
  v1_finetuning_create: {
    parameters: {
      header: {
        /** @description API Key for authentication */
        Authorization: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The ID of the project to use. */
          project_id: number;
          /** @description ID of the model to use. See the model endpoint compatibility table for details. */
          model?: string;
          /** @description The training file. */
          training_data: {
              /** @description The input text. */
              input: string;
              /** @description The output text. */
              output: string;
            }[];
          /** @description The training file. */
          validaton_data?: {
              /** @description The input text. */
              input: string;
              /** @description The output text. */
              output: string;
            }[];
          /**
           * @description The number of epochs to train for.
           * @default 1
           */
          num_epochs?: number;
        };
        "application/x-www-form-urlencoded": {
          /** @description The ID of the project to use. */
          project_id: number;
          /** @description ID of the model to use. See the model endpoint compatibility table for details. */
          model?: string;
          /** @description The training file. */
          training_data: {
              /** @description The input text. */
              input: string;
              /** @description The output text. */
              output: string;
            }[];
          /** @description The training file. */
          validaton_data?: {
              /** @description The input text. */
              input: string;
              /** @description The output text. */
              output: string;
            }[];
          /**
           * @description The number of epochs to train for.
           * @default 1
           */
          num_epochs?: number;
        };
        "multipart/form-data": {
          /** @description The ID of the project to use. */
          project_id: number;
          /** @description ID of the model to use. See the model endpoint compatibility table for details. */
          model?: string;
          /** @description The training file. */
          training_data: {
              /** @description The input text. */
              input: string;
              /** @description The output text. */
              output: string;
            }[];
          /** @description The training file. */
          validaton_data?: {
              /** @description The input text. */
              input: string;
              /** @description The output text. */
              output: string;
            }[];
          /**
           * @description The number of epochs to train for.
           * @default 1
           */
          num_epochs?: number;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @description The ID of the fine-tuning job. */
            job_id: string;
          };
        };
      };
      400: {
        content: {
          "application/json": {
            /** @description A description of the validation error. */
            message: string;
            /** @description Detailed information about the validation errors. */
            details: {
              [key: string]: {
                /** @description Error messages for the field. */
                error_messages: {
                    [key: string]: unknown;
                  }[];
              };
            };
            /**
             * @description * `ValidationError` - ValidationError
             * @enum {string}
             */
            code: "ValidationError";
          };
        };
      };
      401: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `AuthenticationError` - AuthenticationError
             * @enum {string}
             */
            code: "AuthenticationError";
          };
        };
      };
      403: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `PermissionDeniedError` - PermissionDeniedError
             * @enum {string}
             */
            code: "PermissionDeniedError";
          };
        };
      };
      404: {
        content: {
          "application/json": OneOf<[{
            message: string;
            /**
             * @description * `ProviderNotFoundError` - ProviderNotFoundError
             * @enum {string}
             */
            code: "ProviderNotFoundError";
          }, {
            message: string;
            /**
             * @description * `ModelNotFoundError` - ModelNotFoundError
             * @enum {string}
             */
            code: "ModelNotFoundError";
          }]>;
        };
      };
      409: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `ConflictError` - ConflictError
             * @enum {string}
             */
            code: "ConflictError";
          };
        };
      };
      422: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `UnprocessableEntityError` - UnprocessableEntityError
             * @enum {string}
             */
            code: "UnprocessableEntityError";
          };
        };
      };
      429: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `RateLimitError` - RateLimitError
             * @enum {string}
             */
            code: "RateLimitError";
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `ProviderInternalServerError` - ProviderInternalServerError
             * @enum {string}
             */
            code: "ProviderInternalServerError";
          } | {
            message: string;
            /**
             * @description * `APIResponseValidationError` - APIResponseValidationError
             * @enum {string}
             */
            code: "APIResponseValidationError";
          } | {
            message: string;
            /**
             * @description * `ProviderAPIStatusError` - ProviderAPIStatusError
             * @enum {string}
             */
            code: "ProviderAPIStatusError";
          } | {
            message: string;
            /**
             * @description * `ProviderAPITimeoutError` - ProviderAPITimeoutError
             * @enum {string}
             */
            code: "ProviderAPITimeoutError";
          } | {
            message: string;
            /**
             * @description * `ProviderAPIConnectionError` - ProviderAPIConnectionError
             * @enum {string}
             */
            code: "ProviderAPIConnectionError";
          } | {
            message: string;
            /**
             * @description * `CatchAllError` - CatchAllError
             * @enum {string}
             */
            code: "CatchAllError";
          };
        };
      };
    };
  };
  /** @description Retrieve a finetuning job. */
  v1_finetuning_retrieve: {
    parameters: {
      header: {
        /** @description API Key for authentication */
        Authorization: string;
      };
      path: {
        job_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @description The ID of the fine-tuning job. */
            id: string;
            /** @description The ID of the fine-tuned model. */
            fine_tuned_model: string;
            /** @description The Unix timestamp (in seconds) of when the fine-tuning job was created. */
            created_at: number;
            /** @description The Unix timestamp (in seconds) of when the fine-tuning job was finished. */
            finished_at?: number;
            /** @description The status of the fine-tuning job. */
            status: string;
            /** @description The error message of the fine-tuning job. */
            error?: string;
            /** @description The name of the provider that generated the completion. */
            provider_name: string;
            /** @description The ID of the provider that generated the completion. */
            provider_id: string;
            /** @description The status code of the fine-tuning job. */
            status_code: number;
          };
        };
      };
      400: {
        content: {
          "application/json": {
            /** @description A description of the validation error. */
            message: string;
            /** @description Detailed information about the validation errors. */
            details: {
              [key: string]: {
                /** @description Error messages for the field. */
                error_messages: {
                    [key: string]: unknown;
                  }[];
              };
            };
            /**
             * @description * `ValidationError` - ValidationError
             * @enum {string}
             */
            code: "ValidationError";
          };
        };
      };
      401: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `AuthenticationError` - AuthenticationError
             * @enum {string}
             */
            code: "AuthenticationError";
          };
        };
      };
      403: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `PermissionDeniedError` - PermissionDeniedError
             * @enum {string}
             */
            code: "PermissionDeniedError";
          };
        };
      };
      404: {
        content: {
          "application/json": OneOf<[{
            message: string;
            /**
             * @description * `ProviderNotFoundError` - ProviderNotFoundError
             * @enum {string}
             */
            code: "ProviderNotFoundError";
          }, {
            message: string;
            /**
             * @description * `ModelNotFoundError` - ModelNotFoundError
             * @enum {string}
             */
            code: "ModelNotFoundError";
          }]>;
        };
      };
      409: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `ConflictError` - ConflictError
             * @enum {string}
             */
            code: "ConflictError";
          };
        };
      };
      422: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `UnprocessableEntityError` - UnprocessableEntityError
             * @enum {string}
             */
            code: "UnprocessableEntityError";
          };
        };
      };
      429: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `RateLimitError` - RateLimitError
             * @enum {string}
             */
            code: "RateLimitError";
          };
        };
      };
      500: {
        content: {
          "application/json": {
            message: string;
            /**
             * @description * `ProviderInternalServerError` - ProviderInternalServerError
             * @enum {string}
             */
            code: "ProviderInternalServerError";
          } | {
            message: string;
            /**
             * @description * `APIResponseValidationError` - APIResponseValidationError
             * @enum {string}
             */
            code: "APIResponseValidationError";
          } | {
            message: string;
            /**
             * @description * `ProviderAPIStatusError` - ProviderAPIStatusError
             * @enum {string}
             */
            code: "ProviderAPIStatusError";
          } | {
            message: string;
            /**
             * @description * `ProviderAPITimeoutError` - ProviderAPITimeoutError
             * @enum {string}
             */
            code: "ProviderAPITimeoutError";
          } | {
            message: string;
            /**
             * @description * `ProviderAPIConnectionError` - ProviderAPIConnectionError
             * @enum {string}
             */
            code: "ProviderAPIConnectionError";
          } | {
            message: string;
            /**
             * @description * `CatchAllError` - CatchAllError
             * @enum {string}
             */
            code: "CatchAllError";
          };
        };
      };
    };
  };
}
